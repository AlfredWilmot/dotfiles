#!/usr/bin/env bash

# ------------ #
# VIEWING DOCS #
# ------------ #
view() {
  case "$(echo "${1}" | awk -F "." '{print $NF}')" in
    "docx")
      DOCX="${1}"
      MD="${DOCX//.docx/.md}"
      pandoc -t markdown_strict "${DOCX}" -o "${MD}" && nvim "${MD}"
      ;;
    "pdf")
      zathura "${1}"
      ;;
    *)
      if [ "$(file "${1}" | awk -F " " '{print $NF}')" = "text" ]; then
        nvim "$1"
      else
        echo "'${1}' must be a valid text file!"
      fi
      ;;
  esac
}

# ------- #
# GIT GUD #
# ------- #
gb() { git branch "$@"; }
gs() { git status "$@"; }
gd() { git diff "$@"; }
ga() { git add "$@"; }
gl() { git log -n "${1:-1}"; }
gr() { git rebase -i HEAD~"${1:-1}"; }
gc() { git commit -m "$*"; }
gf() { git fetch --all --prune --tags "$@"; }

# ---- #
# PDFS #
# ---- #
encrypt-pdf() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: encrypt-pdf <SOME_PDF_TO_ENCRYPT>"
    echo "a qpdf wrapper for quick pdf encryption"
    return 1
  fi

  INPUT_PDF="$1"
  OUTPUT_PDF="encrypted-${INPUT_PDF}"

  read -r -p "input a password: " -s PASS
  echo ""
  read -r -p "retype the password: " -s PASS_TEST
  echo ""
  if [ "${PASS}" != "${PASS_TEST}" ]; then
    echo "Passwords don't match!" 2>&1
    return 1
  fi

  if [ -z "${PASS}" ]; then
    echo "Cannot assign empty password" 2>&1
    return 1
  fi

  qpdf --encrypt "${PASS}" "${PASS}" 256 -- "${INPUT_PDF}" "${OUTPUT_PDF}"
  echo "Generated encrypted PDF: ${OUTPUT_PDF}"
  echo "Goodbye!"
}
